 import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom'; // Simular navegaci√≥n
import '../../styles/CartPage.css';

const CartPage = () => {
    // Estado inicial del carrito (simulado)
    const [cartItems, setCartItems] = useState([
        { id: 1, name: 'Blusa floral', price: 15.00, quantity: 1, image: '/images/blusa.jpg' },
        { id: 2, name: 'Pantal√≥n de mezclilla', price: 25.50, quantity: 2, image: '/images/pantalon.jpg' },
    ]);

    // Hook para simular la navegaci√≥n entre p√°ginas
    const navigate = useNavigate();

    // Criterio de Aceptaci√≥n: "El carrito debe calcular autom√°ticamente el subtotal"
    const subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const shipping = cartItems.length > 0 ? 5.00 : 0; 
    const total = subtotal + shipping;

    // Funci√≥n para manejar el cambio de cantidad
    const handleQuantityChange = (id, newQuantity) => {
        const quantity = parseInt(newQuantity);
        if (quantity >= 1) {
            setCartItems(prevItems =>
                prevItems.map(item =>
                    item.id === id ? { ...item, quantity } : item
                )
            );
        }
    };

    // Criterio de Aceptaci√≥n: "El usuario puede eliminar productos individuales"
    const handleRemoveItem = (id) => {
        setCartItems(prevItems => prevItems.filter(item => item.id !== id));
    };

    // Funci√≥n SIMULADA para manejar el proceso de pago
    const handleCheckout = () => {
        if (cartItems.length === 0) {
            alert('Tu carrito est√° vac√≠o. A√±ade productos para continuar.');
            return;
        }
        
        // Criterio de Aceptaci√≥n: "Al hacer clic, el usuario es redirigido a una p√°gina de pago segura."
        // Simulaci√≥n: En lugar de un alert simple, simulamos una redirecci√≥n a una p√°gina de pago.
        // En una app real: navigate('/checkout');
        console.log(`Redirigiendo a /checkout para procesar el pago de $${total.toFixed(2)}.`);
        
        // Llamamos a la funci√≥n que simula la p√°gina de pago
        simulatePaymentPage(total);
    };

    // Funci√≥n SIMULADA que representa la P√°gina de Pago y el procesamiento
    const simulatePaymentPage = (finalTotal) => {
        // Criterio de Aceptaci√≥n: "La p√°gina de pago debe solicitar informaci√≥n b√°sica para la transacci√≥n..."
        // Simulaci√≥n: Solicitamos los datos simulados de pago.
        const paymentInfo = prompt(`SIMULACI√ìN DE PAGO SEGURO\n\nTotal a pagar: $${finalTotal.toFixed(2)}\n\n(Ingrese 1234 para simular una tarjeta v√°lida)`);

        if (paymentInfo === '1234') {
            
            // Criterio de Aceptaci√≥n: "El sistema debe procesar el pago y mostrar un mensaje de confirmaci√≥n..."
            // Simulaci√≥n de procesamiento y confirmaci√≥n de la compra.
            alert('‚úÖ ¬°Pago Procesado con √âxito!\n\nTu compra ha sido confirmada. Recibir√°s los detalles en tu correo. ¬°Gracias por tu compra!');
            
            // Vaciado del carrito despu√©s del pago exitoso
            setCartItems([]);
            
            // Opcional: Simular redirecci√≥n a una p√°gina de √©xito
            // navigate('/order-success');
        } else if (paymentInfo !== null) {
            alert('‚ùå Transacci√≥n cancelada o datos no v√°lidos. Int√©ntalo de nuevo.');
        } else {
             // El usuario puls√≥ 'Cancelar' en el prompt
             alert('Proceso de pago cancelado.');
        }
    }


    return (
        <div className="cart-page-container">
            <header className="cart-header">
                <h1>üõí Carrito de Compras</h1>
            </header>

            {/* Simulaci√≥n: Aqu√≠ en una app real, el componente de Navegaci√≥n mostrar√≠a el contador */}
            <p className="cart-global-status-simulated">
                **Simulaci√≥n:** Items en el carrito: **{cartItems.length}** (Este n√∫mero se mostrar√≠a en el icono del men√∫).
            </p>

            {cartItems.length === 0 ? (
                <div className="empty-cart-message">
                    <p>Tu carrito est√° vac√≠o. ¬°Es hora de explorar la mejor moda de segunda mano!</p>
                    <a href="/" className="btn-browse-products">Ver Productos</a>
                </div>
            ) : (
                <div className="cart-content-grid">
                    <div className="cart-items-list">
                        {cartItems.map(item => (
                            <div key={item.id} className="cart-item-card">
                                <img src={item.image} alt={item.name} className="item-image" />
                                <div className="item-details">
                                    <h3>{item.name}</h3>
                                    <p className="item-price">${item.price.toFixed(2)}</p>
                                </div>
                                <div className="item-quantity-controls">
                                    {/* Criterio de Aceptaci√≥n: "ajustar la cantidad de cada uno." */}
                                    <input
                                        type="number"
                                        min="1"
                                        value={item.quantity}
                                        onChange={(e) => handleQuantityChange(item.id, e.target.value)}
                                        aria-label={`Cantidad de ${item.name}`}
                                    />
                                </div>
                                <p className="item-total">${(item.price * item.quantity).toFixed(2)}</p>
                                {/* Criterio de Aceptaci√≥n: "eliminar productos individuales del carrito." */}
                                <button onClick={() => handleRemoveItem(item.id)} className="btn-remove">
                                    &times;
                                </button>
                            </div>
                        ))}
                    </div>

                    <div className="cart-summary">
                        <h2>Resumen del Pedido</h2>
                        <div className="summary-row">
                            <span>Subtotal:</span>
                            <span>${subtotal.toFixed(2)}</span>
                        </div>
                        <div className="summary-row">
                            <span>Env√≠o:</span>
                            <span>${shipping.toFixed(2)}</span>
                        </div>
                        <hr />
                        <div className="summary-row total-row">
                            <span>Total (Impuestos no incluidos):</span>
                            <span>${total.toFixed(2)}</span>
                        </div>
                        {/* Criterio de Aceptaci√≥n: "Debe haber un bot√≥n claro de 'Proceder al Pago'." */}
                        <button onClick={handleCheckout} className="btn-checkout">
                            Proceder al Pago
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default CartPage;